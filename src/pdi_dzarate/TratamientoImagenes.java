/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pdi_dzarate;

import pdi_procesamiento.ImagenOps;
import pdi_procesamiento.FiltrosBasicos;
import pdi_procesamiento.DeteccionBordes;
import pdi_procesamiento.OperacionesMorfologicas;
import java.awt.image.BufferedImage;

/**
 *
 * @author davzarov
 */
public class TratamientoImagenes extends javax.swing.JFrame {

    private BufferedImage bufferImagenOriginal;
    private BufferedImage bufferImagenProcesada;
    private ImagenOps imagenOps;
    private FiltrosBasicos filtrosBasicos;
    private DeteccionBordes deteccionBordes;
    private OperacionesMorfologicas operacionesMorfologicas;

    private void IniciarFiltros() {
        imagenOps = new ImagenOps();
        filtrosBasicos = new FiltrosBasicos();
        deteccionBordes = new DeteccionBordes();
        operacionesMorfologicas = new OperacionesMorfologicas();
    }

    /**
     * Creates new form TratamientoImagenes
     */
    public TratamientoImagenes() {
        initComponents();
        IniciarFiltros();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelImagenes = new javax.swing.JPanel();
        labelOrigen = new javax.swing.JLabel();
        labelResultado = new javax.swing.JLabel();
        panelTabulado = new javax.swing.JTabbedPane();
        tabFiltrosBasicos = new javax.swing.JPanel();
        btnGris = new javax.swing.JButton();
        btnInvertir = new javax.swing.JButton();
        btnBinarizar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnDetectarBordes = new javax.swing.JButton();
        btnDetectarBordesGrad = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnDilatacion = new javax.swing.JButton();
        btnErosion = new javax.swing.JButton();
        barraMenu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuItemAbrirImagen = new javax.swing.JMenuItem();
        menuItemGuardar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Parcial 3 PDI UA 2020.2 - David Zárate");
        setSize(new java.awt.Dimension(1280, 720));

        panelImagenes.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelOrigen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelOrigen.setText("Abra una imágen para empezar");
        labelOrigen.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Imágen Original"));

        labelResultado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelResultado.setText("Aquí se verá el resultado del procesamiento");
        labelResultado.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Imágen Resultante"));

        javax.swing.GroupLayout panelImagenesLayout = new javax.swing.GroupLayout(panelImagenes);
        panelImagenes.setLayout(panelImagenesLayout);
        panelImagenesLayout.setHorizontalGroup(
            panelImagenesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelImagenesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(labelResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelImagenesLayout.setVerticalGroup(
            panelImagenesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelImagenesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelImagenesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelResultado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelOrigen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        panelTabulado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnGris.setText("Escala de Grises");
        btnGris.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrisActionPerformed(evt);
            }
        });

        btnInvertir.setText("Invertir");
        btnInvertir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInvertirActionPerformed(evt);
            }
        });

        btnBinarizar.setText("Binarizar");
        btnBinarizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBinarizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabFiltrosBasicosLayout = new javax.swing.GroupLayout(tabFiltrosBasicos);
        tabFiltrosBasicos.setLayout(tabFiltrosBasicosLayout);
        tabFiltrosBasicosLayout.setHorizontalGroup(
            tabFiltrosBasicosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabFiltrosBasicosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabFiltrosBasicosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGris, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                    .addComponent(btnInvertir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBinarizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        tabFiltrosBasicosLayout.setVerticalGroup(
            tabFiltrosBasicosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabFiltrosBasicosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnGris)
                .addGap(18, 18, 18)
                .addComponent(btnInvertir)
                .addGap(18, 18, 18)
                .addComponent(btnBinarizar)
                .addContainerGap(237, Short.MAX_VALUE))
        );

        panelTabulado.addTab("Filtros Basicos", tabFiltrosBasicos);

        btnDetectarBordes.setText("Detectar Bordes");
        btnDetectarBordes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetectarBordesActionPerformed(evt);
            }
        });

        btnDetectarBordesGrad.setText("Detectar Bordes (Gradiente)");
        btnDetectarBordesGrad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetectarBordesGradActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDetectarBordes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDetectarBordesGrad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnDetectarBordes)
                .addGap(18, 18, 18)
                .addComponent(btnDetectarBordesGrad)
                .addContainerGap(278, Short.MAX_VALUE))
        );

        panelTabulado.addTab("Deteccion de Bordes", jPanel1);

        btnDilatacion.setText("Dilatacion");
        btnDilatacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDilatacionActionPerformed(evt);
            }
        });

        btnErosion.setText("Erosion");
        btnErosion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnErosionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnErosion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDilatacion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnErosion)
                .addGap(18, 18, 18)
                .addComponent(btnDilatacion)
                .addContainerGap(278, Short.MAX_VALUE))
        );

        panelTabulado.addTab("Operaciones Morfologicas", jPanel2);

        menuArchivo.setText("Archivo");

        menuItemAbrirImagen.setText("Abrir Imagen");
        menuItemAbrirImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAbrirImagenActionPerformed(evt);
            }
        });
        menuArchivo.add(menuItemAbrirImagen);

        menuItemGuardar.setText("Guardar Imagen");
        menuItemGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(menuItemGuardar);

        barraMenu.add(menuArchivo);

        setJMenuBar(barraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelImagenes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelTabulado)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panelTabulado)
                    .addComponent(panelImagenes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemAbrirImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAbrirImagenActionPerformed
        // TODO add your handling code here:
        this.bufferImagenOriginal = imagenOps.abrirImagen(rootPane, this.labelOrigen);
    }//GEN-LAST:event_menuItemAbrirImagenActionPerformed

    private void btnGrisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrisActionPerformed
        // TODO add your handling code here:
        if (this.bufferImagenOriginal != null) {
            this.bufferImagenProcesada = filtrosBasicos.escalarGris(this.bufferImagenOriginal);
            imagenOps.insertarImagen(this.bufferImagenProcesada, this.labelResultado);
        } else {
            imagenOps.ErrorCargarImagen(
                    rootPane,
                    "Primero abra una imágen para aplicar el filtro.",
                    "No hay imágen que procesar"
            );
        }
    }//GEN-LAST:event_btnGrisActionPerformed

    private void btnInvertirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInvertirActionPerformed
        // TODO add your handling code here:
        if (this.bufferImagenOriginal != null) {
            String canal = filtrosBasicos.seleccionarCanal(rootPane);
            if (canal != null) {
                this.bufferImagenProcesada = filtrosBasicos.invertir(this.bufferImagenOriginal, canal);
                imagenOps.insertarImagen(this.bufferImagenProcesada, this.labelResultado);
            }
        } else {
            imagenOps.ErrorCargarImagen(
                    rootPane,
                    "Primero abra una imágen para aplicar el filtro.",
                    "No hay imágen que procesar"
            );
        }
    }//GEN-LAST:event_btnInvertirActionPerformed

    private void btnBinarizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBinarizarActionPerformed
        // TODO add your handling code here:
        if (this.bufferImagenOriginal != null) {
            Integer umbral = filtrosBasicos.seleccionarUmbral(rootPane);
            if (umbral != null) {
                this.bufferImagenProcesada = filtrosBasicos.binarizar(this.bufferImagenOriginal, umbral);
                imagenOps.insertarImagen(this.bufferImagenProcesada, this.labelResultado);
            }
        } else {
            imagenOps.ErrorCargarImagen(
                    rootPane,
                    "Primero abra una imágen para aplicar el filtro.",
                    "No hay imágen que procesar"
            );
        }
    }//GEN-LAST:event_btnBinarizarActionPerformed

    private void btnDetectarBordesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetectarBordesActionPerformed
        // TODO add your handling code here:
        if (this.bufferImagenOriginal != null) {
            String metodo = deteccionBordes.seleccionarMetodo(rootPane);
            if (metodo != null) {
                this.bufferImagenProcesada = deteccionBordes.detectarBordes(this.bufferImagenOriginal, metodo);
                imagenOps.insertarImagen(this.bufferImagenProcesada, this.labelResultado);
            }
        } else {
            imagenOps.ErrorCargarImagen(
                    rootPane,
                    "Primero abra una imágen para aplicar el filtro.",
                    "No hay imágen que procesar"
            );
        }
    }//GEN-LAST:event_btnDetectarBordesActionPerformed

    private void btnDetectarBordesGradActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetectarBordesGradActionPerformed
        // TODO add your handling code here:
        if (this.bufferImagenOriginal != null) {
            Double peso = deteccionBordes.seleccionarPeso(rootPane);
            if (peso != null) {
                this.bufferImagenProcesada = deteccionBordes.detectarBordesGradiente(this.bufferImagenOriginal, peso);
                imagenOps.insertarImagen(this.bufferImagenProcesada, this.labelResultado);
            }
        } else {
            imagenOps.ErrorCargarImagen(
                    rootPane,
                    "Primero abra una imágen para aplicar el filtro.",
                    "No hay imágen que procesar"
            );
        }
    }//GEN-LAST:event_btnDetectarBordesGradActionPerformed

    private void btnErosionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnErosionActionPerformed
        // TODO add your handling code here:
        if (this.bufferImagenOriginal != null) {
            Integer umbral = filtrosBasicos.seleccionarUmbral(rootPane);
            if (umbral != null) {
                BufferedImage imagenBinaria = filtrosBasicos.binarizar(this.bufferImagenOriginal, umbral);
                BufferedImage imagenAux = imagenOps.copiarImagen(imagenBinaria);
                Integer pasadas = operacionesMorfologicas.seleccionarPasadas(rootPane);
                if (pasadas != null) {
                    for (int i = 0; i < pasadas; i++) {
                        // System.out.print(i);
                        // this.bufferImagenProcesada = operacionesMorfologicas.erosion(imagenBinaria);
                        imagenAux = operacionesMorfologicas.erosion(imagenAux);
                    }
                } else {
                    imagenAux = operacionesMorfologicas.erosion(imagenAux);
                }
                this.bufferImagenProcesada = imagenAux;
                imagenOps.insertarImagen(imagenBinaria, this.labelOrigen);
                imagenOps.insertarImagen(this.bufferImagenProcesada, this.labelResultado);
            }
        } else {
            imagenOps.ErrorCargarImagen(
                    rootPane,
                    "Primero abra una imágen para aplicar el filtro.",
                    "No hay imágen que procesar"
            );
        }
    }//GEN-LAST:event_btnErosionActionPerformed

    private void btnDilatacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDilatacionActionPerformed
        // TODO add your handling code here:
        if (this.bufferImagenOriginal != null) {
            Integer umbral = filtrosBasicos.seleccionarUmbral(rootPane);
            if (umbral != null) {
                BufferedImage imagenBinaria = filtrosBasicos.binarizar(this.bufferImagenOriginal, umbral);
                BufferedImage imagenAux = imagenOps.copiarImagen(imagenBinaria);
                Integer pasadas = operacionesMorfologicas.seleccionarPasadas(rootPane);
                if (pasadas != null) {
                    for (int i = 0; i < pasadas; i++) {
                        imagenAux = operacionesMorfologicas.dilatacion(imagenAux);
                    }
                } else {
                    imagenAux = operacionesMorfologicas.dilatacion(imagenAux);
                }
                this.bufferImagenProcesada = imagenAux;
                imagenOps.insertarImagen(imagenBinaria, this.labelOrigen);
                imagenOps.insertarImagen(this.bufferImagenProcesada, this.labelResultado);
            }
        } else {
            imagenOps.ErrorCargarImagen(
                    rootPane,
                    "Primero abra una imágen para aplicar el filtro.",
                    "No hay imágen que procesar"
            );
        }
    }//GEN-LAST:event_btnDilatacionActionPerformed

    private void menuItemGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemGuardarActionPerformed
        // TODO add your handling code here:
        if (this.bufferImagenProcesada != null) {
            imagenOps.guardarImagen(rootPane, this.bufferImagenProcesada);
        } else {
            imagenOps.ErrorCargarImagen(
                    rootPane,
                    "Primero abra una imágen y aplique algún filtro.",
                    "No hay imágen que procesar"
            );
        }
    }//GEN-LAST:event_menuItemGuardarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TratamientoImagenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TratamientoImagenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TratamientoImagenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TratamientoImagenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TratamientoImagenes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JButton btnBinarizar;
    private javax.swing.JButton btnDetectarBordes;
    private javax.swing.JButton btnDetectarBordesGrad;
    private javax.swing.JButton btnDilatacion;
    private javax.swing.JButton btnErosion;
    private javax.swing.JButton btnGris;
    private javax.swing.JButton btnInvertir;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel labelOrigen;
    private javax.swing.JLabel labelResultado;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenuItem menuItemAbrirImagen;
    private javax.swing.JMenuItem menuItemGuardar;
    private javax.swing.JPanel panelImagenes;
    private javax.swing.JTabbedPane panelTabulado;
    private javax.swing.JPanel tabFiltrosBasicos;
    // End of variables declaration//GEN-END:variables

}
